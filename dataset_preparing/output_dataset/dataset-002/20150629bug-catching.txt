специалисты массачусетского технологического университета создали алгоритм code phage способный автоматически исправлять ошибки исходном коде программ главной особенностью нового приложения стала способность поиску подходящих заплаток исполняемом коде программдоноров поэтому алгоритм использовать донорские фрагменты написанные любом языке программирования исследование опубликовано сборнике тезисов конференции 36th acm sigplan confer program languag design implementationновый алгоритм работает следующему принципу вначале получает исходный код целевой программы два набора данных один которых успешно исполняется другой вызывает ошибку алгоритм использует наборы данных среди программдоноров найти такую которых оба обрабатываются без ошибкидалее исполняемом коде программы донора алгоритм проходит всем условным переходам ища после него два набора входящих данных оказались разных ветвях идея заключается большой вероятностью данный переход раз содержит необходимую проверку которая позволяет избежать ошибкидалее алгоритм найденном фрагменте исполняемого кода вновь запускает данные создававшие ошибку результам исполнения построить символьное древо представлений функцию входных данных этом древу алгоритм создает исходный код нужном языке программирования последнем шаге алгоритм вставляет новый исходный код различные участки целевой программы исправить имеющуюся ошибку внести новых эта процедура выстроена таким образом после внесения заплатки случае получения данных способных вызвать ошибку программа просто завершит свое исполнение таким образом алгоритм вносит никакого нового поведения просто локализует опасный участок кода добавляет этом месте обязательную проверкупо результатам тестирования случаях авторам удалось автоматически исправить ошибки связанные делением ноль переполнением целочисленного типа качестве целевых программ доноров использовались приложения открытым кодомученые отмечают впервые удалось создать подобный алгоритм который тому обладает несколькими принципиальными преимуществами мнению авторов главное способность работать исполняемым кодом доноров делает алгоритм независимым языка программирования новый подход способен эффективно решить проблему переноса имен переменных донорского кода целевой делает метод универсальным